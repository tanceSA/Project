
1. List介面中儲存資料的特點:用於儲存有序的,可以重複的數據 --> 使用List替代陣列


2. List中的常用方法

第1波: Collection中宣告的15個方法

第2波: 因為List是有序的, 增加一些針對索引的方法
插入元素
void add(int index, Object ele):在index位置插入ele元素
boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来
获取元素
Object get(int index):获取指定index位置的元素
List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合
获取元素索引
int indexOf(Object obj):返回obj在集合中首次出现的位置
int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置
删除和替换元素
Object remove(int index):移除指定index位置的元素，并返回此元素
Object set(int index, Object ele):设置指定index位置的元素为ele

小結:
    增
        add(Object obj)
        addAll(Collection coll)
    刪
        remove(Object obj)
        remove(int index)
    改
        set(int index, Object ele)
    查
        Object get(int index)
    插
        void add(int index, Object ele)
        boolean addAll(int index, Collection eles)
    長度
        size()
    遍歷
        iterator():使用迭代器
        增強for循環
        一般for循環

3. List及其實現類別特點
java.util.Collection 儲存單一數據
    |----子介面: List:儲存有序的、可重複的數據("動態"陣列)
            |---ArrayList:　主要實現類別,執行緒不安全,效率高,底層使用Object[]儲存
                              在增加和查找數據時效率較高，在插入，刪除數據時效率較低
            |---LinkedList: 底層使用雙向鏈表的方式進行儲存
                              在插入和刪除數據數據時效率較高，在增加和查找時效率較低
            |---Vector: 古老的實現類別,執行緒安全,效率低,底層使用Object[]儲存

[面試題]
ArrayList、vector的區別？
ArrayList、LinkedList的區別？